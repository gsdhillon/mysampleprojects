Interface of DESTool Class

    /**
     * generates fresh secret key and store in a private field 'key'
     * @return GenKeyResult status 0 ok
     *                      status 1 failed
     */
    public GenKeyResult generateSeceretKey();


    /**
     * build secret key from encryptedKey and store in the private filed 'key'
     * @param encryptedKey
     * @param empNo
     * @return SetKeyResult - status 0 OK
     *                        status 1 Token dos'nt belongs to empno provided
     *                        status 2 Invalid encrypted data
     *                        status 3 other exception
     */
    public SetKeyResult SetSecretKey(String encryptedKey, String empNo);


    /**
     * encrypt the secret key using public key of the employee and return 
     * base64 encoded encrypted key
     * @param empNo - employee for whom key is encrypted
     * @return GetKeyResult - status 0 OK
     *                        status 1 public key certificate not found
     *                        status 2 other exception
     */
    public GetKeyResult getKey( String empNo);



    /**
     * encrypt data reading from inputstream and 
     * put the encrypted text into outputstream
     * @param in - InputStream
     * @param out - OutputStream
     * @return EncryptStreamResult - status 0 OK
     *                               status 1 Failed
     */
    public EncryptStreamResult encryptStream(InputStream in, OutputStream out);




    /**
     * decrypt data reading from inputstream and 
     * put the decrypted text into outputstream
     * @param in
     * @param out
     * @return DecryptStreamResult - status 0 OK
     *                               status 1 Failed
     */
    public DecryptStreamResult decryptStream(InputStream in, OutputStream out);



    /**
     * encrypt data in inBuff 
     * convert encrypted data into base64
     * put the base64 data into encryptedData field of EncryptDataResult
     * @param data
     * @return EncryptDataResult   - status 0 OK
     *                               status 1 Failed
     */
    public EncryptDataResult encryptData(byte[] inBuff);



    /**
     * decrypt base64 encoded encryptedData 
     * put decrypted data into the data field of DecryptDataResult
     * @param encryptedData
     * @return DecryptDataResult   - status 0 OK
     *                               status 1 Failed
     */
    public DecryptDataResult decryptData(String encryptedData);

end;